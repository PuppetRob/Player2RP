
-- local queue = {}



local CurrentLobby = {



}
local lstHerse = {}
local lstKart = {}
local LobbyTimer = {}
local listFinishLine = {}

RegisterServerEvent('PlasmaKart:NewSession')
AddEventHandler('PlasmaKart:NewSession', function(data)
	local player = source
	print("PlasmaKart:NewSession")
	if CurrentLobby[data["curshop"]] == {} or CurrentLobby[data["curshop"]] == nil then
	
		print("no lobby")
		CurrentLobby[data["curshop"]] = {Shop = data["curshop"], LobbyName = data["sessionname"], Mode = data["gamemode"], Maps = Maps[data["maps"]], Lap = data["nblap"], State = "Lobby", Players = {}, Creator = player, Cylindre = data["cylindre"], CP = {}, CPorder = {} }
		notification(player,trad[lang]["LobbyCreated"],"success")
		
		-- TriggerEvent("pNotify:SSendNotification",player, {text = "Session créée.", type = "success", timeout = 2400, layout = "bottomLeft"})
	else
		notification(player,trad[lang]["LobbyInProgress"],"error")
		-- TriggerEvent("pNotify:SSendNotification",player, {text = "Une session est déja en cours.", type = "error", timeout = 2400, layout = "bottomLeft"})
	end
end)

RegisterServerEvent('PlasmaKart:GetSession')
AddEventHandler('PlasmaKart:GetSession', function(shop)
	local player = source
	print("PlasmaKart:GetSession")
	if CurrentLobby[shop] == {} or CurrentLobby[shop] == nil then
		print("no lobby")
		notification(player,trad[lang]["NoLobby"],"error")
		-- TriggerEvent("pNotify:SSendNotification",player, {text = "Il n'y a pas de session créée.", type = "error", timeout = 2400, layout = "bottomLeft"})
	else
		if CurrentLobby[shop].Creator == player then
			-- TriggerEvent("PlasmaKart:AskForJoinASession",player,CurrentLobby,shop,true)
			TriggerClientEvent("PlasmaKart:SendSession",player,CurrentLobby[shop],true)
		else
			-- TriggerEvent("PlasmaKart:AskForJoinASession",player,CurrentLobby,shop,false)
			TriggerClientEvent("PlasmaKart:SendSession",player,CurrentLobby[shop],false)
		end
	end
end)

RegisterServerEvent('PlasmaKart:CanJoinSession')
AddEventHandler('PlasmaKart:CanJoinSession', function(player,shop,nbPlayer)
	CurrentLobby[shop]["Players"][nbPlayer+1] = {}
	CurrentLobby[shop]["Players"][nbPlayer+1].src = player
	CurrentLobby[shop]["Players"][nbPlayer+1].name = GetPlayerPseudo(player)
	CurrentLobby[shop]["Players"][nbPlayer+1].state = "Join"
	
	notification(player,trad[lang]["JoinedLobby"],"success")
	-- TriggerEvent("pNotify:SSendNotification",player, {text = "Vous avez rejoins cette session.", type = "success", timeout = 2400, layout = "bottomLeft"})
	if (nbPlayer+1) == MaxPlayerInSession then
		StartSession(shop)
	end
end)

RegisterServerEvent('PlasmaKart:JoinSession')
AddEventHandler('PlasmaKart:JoinSession', function(shop)
	local player = source
	print("PlasmaKart:JoinSession")
	if CurrentLobby[shop] == {} or CurrentLobby[shop] == nil then
		print("no lobby")
		notification(player,trad[lang]["NoLobby"],"error")
		-- TriggerEvent("pNotify:SSendNotification",player, {text = "Il n'y a pas de session créée.", type = "error", timeout = 2400, layout = "bottomLeft"})
	else
		if CurrentLobby[shop].State == "Lobby" then
			local nbPlayer = #CurrentLobby[shop]["Players"]
			local found = false
			print("Nb player in session:"..tostring(nbPlayer))
			if nbPlayer < MaxPlayerInSession then
				for k,v in pairs(CurrentLobby[shop]["Players"]) do
					if v.src == player then
					found = true
					break
					end
				end
				if not found then
					--CurrentLobby[shop]["Players"][nbPlayer+1] = {}
					--CurrentLobby[shop]["Players"][nbPlayer+1].src = player
					--CurrentLobby[shop]["Players"][nbPlayer+1].name = GetPlayerPseudo(player)
					--CurrentLobby[shop]["Players"][nbPlayer+1].state = "Join"
					--
					--notification(player,trad[lang]["JoinedLobby"],"success")
					---- TriggerEvent("pNotify:SSendNotification",player, {text = "Vous avez rejoins cette session.", type = "success", timeout = 2400, layout = "bottomLeft"})
					--if (nbPlayer+1) == MaxPlayerInSession then
					--	StartSession(shop)
					--end
					TriggerEvent("PlasmaKart:AskForJoinASession",player,shop,nbPlayer)
				else
					notification(player,trad[lang]["AlreadyJoinedLobby"],"error")
					-- TriggerEvent("pNotify:SSendNotification",player, {text = "Vous avez déja rejoins cette session.", type = "error", timeout = 2400, layout = "bottomLeft"})
				end
			else
					notification(player,trad[lang]["LobbyFull"],"error")
				-- TriggerEvent("pNotify:SSendNotification",player, {text = "Session pleine.", type = "error", timeout = 2400, layout = "bottomLeft"})
			end
		else
					notification(player,trad[lang]["SessionRunning"],"error")
			-- TriggerEvent("pNotify:SSendNotification",player, {text = "Session déja en cours.", type = "error", timeout = 2400, layout = "bottomLeft"})
		end
	end

end)


function StartSession(shop)
	print("StartSession for : "..tostring(shop))
	CurrentLobby[shop].State = "Run"
	
	randPos = {}
	
	for i=1,10 do
		-- randPos[i] 
		local ok = true
		while ok do
			nb = math.random(1,10)
			local founded = false
			for k,v in pairs(randPos) do
				if v == nb then
					founded = true
				end
			end
			if founded then
				
			else
				randPos[i] = nb
				ok = false
			end
		end
	end
	
	for k,v in pairs(CurrentLobby[shop].Players) do
		TriggerClientEvent("PlasmaKart:SendthePREStartSession",v.src,CurrentLobby[shop],randPos[k])
	end
	
	
	for k,v in pairs(CurrentLobby[shop].Players) do
		TriggerClientEvent("PlasmaKart:Cam",v.src,CurrentLobby[shop].Maps)
	end
	-- CurrentLobby[shop].Maps.Name
	
	Wait(tonumber(Maps[CurrentLobby[shop].Maps.Name].waitingTime))
	
	for k,v in pairs(CurrentLobby[shop].Players) do
		TriggerClientEvent("PlasmaKart:SendtheStartSession",v.src,CurrentLobby[shop],randPos[k])
	end
	LobbyTimer[shop] = GetGameTimer()
end

RegisterServerEvent('PlasmaKart:AskForSpikeDelete')
AddEventHandler('PlasmaKart:AskForSpikeDelete', function(netid)
	DeleteEntity(NetworkGetEntityFromNetworkId(netid))
end)

RegisterServerEvent('PlasmaKart:StartSession')
AddEventHandler('PlasmaKart:StartSession', function(shop)
	local player = source
	if #CurrentLobby[shop].Players > 0 then
		StartSession(shop)
	else
		notification(player,trad[lang]["SessionEmpty"],"error")
	end
end)

RegisterServerEvent('PlasmaKart:DeleteSession')
AddEventHandler('PlasmaKart:DeleteSession', function(shop, extPlayer)
	-- local player = 0
	-- if source ~= nil then
		-- player = source
	-- else
	local player = extPlayer
	print("try to delete :"..tostring(shop))
	if CurrentLobby[shop] ~= nil then
		if CurrentLobby[shop].State == "Lobby" then
			CurrentLobby[shop] = nil
			notification(player,trad[lang]["LobbyDeleted"],"success")
		else
			notification(player,trad[lang]["NotInLobbyMode"],"error")
		end
	else
		notification(player,trad[lang]["NoLobby"],"error")
	end
	-- end
	
	
end)

Citizen.CreateThread(function()
	while true do
		Wait(100)
		lstFinished = {}
		for k,v in pairs(CurrentLobby) do
			lstFinished[k] = true
			if CurrentLobby[k].State == "Run" then
				if #CurrentLobby[k].Players > 0 then
					for k1,v1 in pairs(CurrentLobby[k].Players) do
						if v1.state ~= "Finished" then
							lstFinished[k] = false
						end
					end
				else
					-- print("pas de player")
					lstFinished[k] = false
				end
			else
				-- print("pas en run: "..tostring(CurrentLobby[k].State))
				lstFinished[k] = false
			end
			if CurrentLobby[k].State == "Join" then
				
			end
			-- print(tostring(k).." finished ?:"..tostring(lstFinished[k]))
			if lstFinished[k] == true then
				Wait(5000)
				for k2,v2 in pairs(CurrentLobby[k].Players) do
					notification(v2.src,trad[lang]["RaceFinished"],"success")
					-- TriggerEvent("pNotify:SSendNotification",v2.src, {text = "Course Terminée.", type = "success", timeout = 2400, layout = "bottomLeft"})
					
					TriggerClientEvent("PlasmaKart:SendTheEnd",v2.src,CurrentLobby[k].Shop)
					
				end
				DespawnHerse(CurrentLobby[k].Shop)
				DespawnKart(CurrentLobby[k].Shop)
				listFinishLine[CurrentLobby[k].Shop]=nil
				CurrentLobby[k] = nil
				
			end
		end
	end
end)

local playerDecoTab = {}
--GESTION DECO
Citizen.CreateThread(function()
	while true do
		Wait(100)
		lstFinished = {}
		for k,v in pairs(CurrentLobby) do
			-- lstFinished[k] = true
			-- if CurrentLobby[k].State == "Run" then
			if #CurrentLobby[k].Players > 0 then
				-- print("analyse lobby")
				for k1,v1 in pairs(CurrentLobby[k].Players) do
					-- print("for state : "..tostring(v1.state))res
					local src = v1.src
					if v1.state == "Join" then
						if GetPlayerPing(src) == 0 then
							print("GetPlayerPing("..tostring(src)..") : "..tostring(GetPlayerPing(src)))
							
							if playerDecoTab[src] == nil then
								playerDecoTab[src] = true
								
								
								Citizen.CreateThread(function()
									
									local currentDecoSession = k
									local currentDecoPlayer = src
									print("CreateThread for deco : "..tostring(currentDecoPlayer))
									local cptTimeoutDeco = 0
									local mustRemove = true
									while cptTimeoutDeco < 20 do
										cptTimeoutDeco = cptTimeoutDeco + 1
										if GetPlayerPing(src) ~= 0 then
											mustRemove = false
										end
										Wait(5)
									end
									if mustRemove then
										
										if v.State == "Run" then
											print("mustRemove for deco RUN: "..tostring(currentDecoPlayer))
											for k12,v12 in pairs(CurrentLobby[k]["Players"]) do
												if v12.src == src then
													print("Set Finished for : "..tostring(k).." ply: "..tostring(k12))
													CurrentLobby[k]["Players"][k12].state = "Finished"
												end
											end
											-- currentPaintBallSession[currentDecoSession].EquipB[currentDecoPlayer] = nil
											playerDecoTab[src] = nil
										elseif v.State == "Lobby" then
											print("mustRemove for deco LOBBY: "..tostring(currentDecoPlayer))
											CurrentLobby[k] = nil
										end
									else
										print("not remove for deco : "..tostring(currentDecoPlayer))
										playerDecoTab[src] = nil
									end
								end)
							end
						end
					end
				end
			
			end
			-- print("State : "..tostring(v.State))
			if v.State == "Lobby" then
				-- print("lobby join")
				-- GetPlayerPing(v.Creator)
				-- for k1,v1 in pairs(CurrentLobby[k].Players) do
					local src = v.Creator
					-- if v1.state == "Run" then
						if GetPlayerPing(src) == 0 then
							print("GetPlayerPing("..tostring(src)..") : "..tostring(GetPlayerPing(src)))
							
							if playerDecoTab[src] == nil then
								playerDecoTab[src] = true
								
								
								Citizen.CreateThread(function()
									
									local currentDecoSession = k
									local currentDecoPlayer = src
									print("CreateThread for deco : "..tostring(currentDecoPlayer))
									local cptTimeoutDeco = 0
									local mustRemove = true
									while cptTimeoutDeco < 20 do
										cptTimeoutDeco = cptTimeoutDeco + 1
										if GetPlayerPing(src) ~= 0 then
											mustRemove = false
										end
										Wait(5)
									end
									if mustRemove then

											print("mustRemove for deco LOBBY: "..tostring(currentDecoPlayer))
											CurrentLobby[k] = nil
									else
										print("not remove for deco : "..tostring(currentDecoPlayer))
										playerDecoTab[src] = nil
									end
								end)
							end
						end
					-- end
				-- end
			
			end
		end
	end
end)


function DespawnHerse(shop)
	print("DespawnHerse : "..tostring(shop))
	if lstHerse[shop] ~= nil then
		for k,v in pairs(lstHerse[shop]) do
			DeleteEntity(NetworkGetEntityFromNetworkId(v))
		end
	end
end

function DespawnKart(shop)
	print("DespawnKart : "..tostring(shop))
	if lstKart[shop] ~= nil then
		for k,v in pairs(lstKart[shop]) do
			DeleteEntity(NetworkGetEntityFromNetworkId(v))
		end
	end
end

RegisterServerEvent('PlasmaKart:Finish')
AddEventHandler('PlasmaKart:Finish', function(shop)
	local player = source
	print("send finish")
	for k,v in pairs(CurrentLobby[shop]["Players"]) do
		if v.src == player then
			CurrentLobby[shop]["Players"][k].state = "Finished"
			if listFinishLine[shop] == nil then listFinishLine[shop] = {} end
			local nbFinish = #listFinishLine[shop]
			listFinishLine[shop][nbFinish+1] = {player=player,curTime = os.clock()}
			TriggerClientEvent("PlasmaKart:SendFinalPos",player,nbFinish+1)
			print("^1player have finish ^7")
		end
	end
end)

RegisterServerEvent('PlasmaKart:CpPassed')
AddEventHandler('PlasmaKart:CpPassed', function(shop,cp,lap)
	local player = source
	print("received PlasmaKart:CpPassed "..tostring(cp).." "..tostring(lap))
	if CurrentLobby[shop]["CP"][lap] == nil then print("init lap") CurrentLobby[shop]["CP"][lap] = {} end
	if CurrentLobby[shop]["CP"][lap][cp] == nil then  print("init cp") CurrentLobby[shop]["CP"][lap][cp] = {} end
	nb = #CurrentLobby[shop]["CP"][lap][cp]
	
	CurrentLobby[shop]["CP"][lap][cp][nb+1] = {player = player, curtime = os.clock()}
	TriggerClientEvent("PlasmaKart:SendOrder",player,nb+1)
	--local player = source
	--
	--if not CurrentLobby[shop]["CP"][lap][player] then
	--	
	--	CurrentLobby[shop]["CP"][lap][player] = {}
	--	titi = #CurrentLobby[shop]["CP"][lap][player]
	--	CurrentLobby[shop]["CP"][lap][player][cp+1] = GetGameTimer()
	--	
	--else
	--	-- print(tostring(player).." pass another cp : "..tostring(cp).." with time : "..tostring(os.time()).." "..tostring(#CurrentLobby[shop]["CP"][player]))
	--	
	--	titi = #CurrentLobby[shop]["CP"][lap][player]
	--	CurrentLobby[shop]["CP"][lap][player][titi+1] = GetGameTimer()
	--	TriggerClientEvent("PlasmaKart:SendTiming",player, CurrentLobby[shop]["CP"][lap][player][titi+1]-CurrentLobby[shop]["CP"][player][titi])
	--	-- print("titi : "..tostring(titi))
	--end
	---- print(tostring(player).." pass cp : "..tostring(titi).." with time : "..tostring(os.time()).." titi : "..tostring(titi))
	--getRacerOrder(CurrentLobby[shop]["CP"][lap])
end)

RegisterServerEvent('PlasmaKart:SendKartId')
AddEventHandler('PlasmaKart:SendKartId', function(kartID,shop)
	print("PlasmaKart:SendKartId :"..tostring(shop))
	local player = source
	if lstKart[shop] == nil then
		lstKart[shop] = {}
	end
	local nb = #lstKart[shop]
	lstKart[shop][nb+1] = kartID
	
	-- for k,v in pairs(lstHerse[shop]) do
		-- print(tostring(shop).." k : "..tostring(k).." v: "..tostring(v))
	-- end
end)


RegisterServerEvent('PlasmaKart:SendHerseId')
AddEventHandler('PlasmaKart:SendHerseId', function(spikeId,shop,coords)
	print("PlasmaKart:SendHerseId :")
	if UseSound then
	xSound:PlayUrlPos(-1,"spike"..tostring(spikeId),SpikesSound,0.5,coords, false, {})
	end
	local player = source
	if lstHerse[shop] == nil then
		lstHerse[shop] = {}
	end
	local nb = #lstHerse[shop]
	lstHerse[shop][nb+1] = spikeId
	
	-- for k,v in pairs(lstHerse[shop]) do
		-- print(tostring(shop).." k : "..tostring(k).." v: "..tostring(v))
	-- end
end)

RegisterServerEvent('PlasmaKart:BoostSound')
AddEventHandler('PlasmaKart:BoostSound', function(coords)
	
	if UseSound then
	id = math.random(0,100000)
	xSound:PlayUrlPos(-1,"Boost"..tostring(id),BoostSound,1.0,coords, false, {})
	end
end)

local previousTime

RegisterServerEvent('PlasmaKart:timer')
AddEventHandler('PlasmaKart:timer', function()
	local player = source
	print("previousTime : "..tostring(previousTime).." gametimer : "..tostring(GetGameTimer()))
	previousTime = GetGameTimer()
	
end)


RegisterServerEvent('PlasmaKart:Leave')
AddEventHandler('PlasmaKart:Leave', function(shop)
	local player = source
	for k,v in pairs(CurrentLobby[shop].Players) do
		if v.src == player then
			print("found a player who want to leave")
			CurrentLobby[shop]["Players"][k].state = "Finished"
		end
	end
	
end)

RegisterServerEvent('PlasmaKart:Sound1')
AddEventHandler('PlasmaKart:Sound1', function(coords)
	print("1")
	local options =
			{	
				onPlayStart = function(event) -- event argument returns getInfo(id)
					print("start of :"..event.url)
				end,
				onPlayEnd = function(event) 
					print("end of : "..event.url)
					stepfinished = true
				end,
			}  
	xSound:PlayUrlPos(-1,"name","./sounds/Mario_Bip.ogg",1,coords, false, options)
end)

RegisterServerEvent('PlasmaKart:Sound2')
AddEventHandler('PlasmaKart:Sound2', function(coords)
	print("2")
	local options =
			{	
				onPlayStart = function(event) -- event argument returns getInfo(id)
					print("start of :"..event.url)
				end,
				onPlayEnd = function(event) 
					print("end of : "..event.url)
					stepfinished = true
				end,
			}  
	xSound:PlayUrlPos(-1,"name","./sounds/Mario_DEPART_bip.ogg",1,coords, false, options)
end)

RegisterServerEvent('PlasmaKart:Sound3')
AddEventHandler('PlasmaKart:Sound3', function(coords)
	print("3")
	local options =
			{	
				onPlayStart = function(event) -- event argument returns getInfo(id)
					print("start of :"..event.url)
				end,
				onPlayEnd = function(event) 
					print("end of : "..event.url)
					stepfinished = true
				end,
			}  
	
end)